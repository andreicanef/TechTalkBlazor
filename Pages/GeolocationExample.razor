@page "/geolocation"
@using BrowserInterop.Extensions;
@using BrowserInterop.Geolocation
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient

<h3>GeolocationExample</h3>

<button type="button" @onclick="GetGeolocation">Get Current Position</button>

@if (currentPosition != null && currentPosition.Location != null){
<div>
    Current position :
    <ul>
        <li>Latitude : @currentPosition.Location.Coords.Latitude</li>
        <li>Longitude : @currentPosition.Location.Coords.Longitude </li>
        <li>Altitude : @currentPosition.Location.Coords.Altitude </li>
        <li>Accuracy : @currentPosition.Location.Coords.Accuracy </li>
        <li>Altitude Accuracy : @currentPosition.Location.Coords.AltitudeAccuracy </li>
        <li>Heading : @currentPosition.Location.Coords.Heading </li>
        <li>Speed : @currentPosition.Location.Coords.Speed </li>
    </ul>
</div>
}
            else
            {
                <div>please click 'allow' on the browser popup, to enable this feature. </div>
            }

@code {

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationResult currentPosition;
    private WeatherForecast weatherForecast;

    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
        await window.Console.Log("this is a {0}", "Log message");

    }

    public async Task GetGeolocation()
    {
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        }));

        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri($"https://weatherbit-v1-mashape.p.rapidapi.com/current?lon={currentPosition.Location.Coords.Longitude}&lat={currentPosition.Location.Coords.Latitude}"),
            Headers =
            {
                { "x-rapidapi-key", "3a7a96bbb5msh867ecb6e7ce748ap15d4dajsn02d579113e64" },
                { "x-rapidapi-host", "weatherbit-v1-mashape.p.rapidapi.com" }
            }
        };

        using (var response = await httpClient.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();
            var window = await jsRuntime.Window();
            Console.Write(body);
        }

    }

    public class WeatherForecast
    {
        public string CityName { get; set; }
        public WeatherInfo WeatherInformation { get; set; }
        public DateTime DateRecorded { get; set; }
        public string Sunrise { get; set; }

    }

    public class WeatherInfo
    {
        public string Description { get; set; }
        public string Icon { get; set; }
        public string Code { get; set; }
    }
}
